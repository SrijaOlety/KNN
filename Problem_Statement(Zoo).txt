Implement a KNN model to classify the animals in to categorie


#KNN assignment#
import numpy as np
import pandas as pd
df = pd.read_csv("C:\\Users\\dell\\Downloads\\Zoo.csv")
df
df.shape
df.info() 
df = df.drop(df.columns[[0]],axis = 1)
df
df.shape
df.info()

#data partitioning#
df_cont = df.iloc[:,0:16]
df_cont
df_cont.shape
df_cont.info()

Y = df["type"]
Y

#partitioning of data into training and testing data#
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(df_cont,Y,train_size = 0.75,random_state = 15)

#KNN nearest algorithm#
from sklearn.neighbors import KNeighborsClassifier
KNN =   KNeighborsClassifier(n_neighbors = 13,p = 2)#p=2 is euclidean distance#
KNN.fit(X_train,Y_train)
Y_pred_train = KNN.predict(X_train)
Y_pred_test = KNN.predict(X_test)
from sklearn.metrics import accuracy_score
ac1 = accuracy_score(Y_train,Y_pred_train)
ac1
ac2 = accuracy_score(Y_test,Y_pred_test)
ac2

#cross validation method#
""""VALIDATION SET APPROACH FOR IDENTIFYING THE MOST AVERAGE VALUE FOR KNN ALGO"""
l1 = []
l2 = []#we should only run once the above two statements

training_accuracy = []
test_accuracy = []
for i in range(1,100):
    X_train,X_test,Y_train,Y_test = train_test_split(df_cont,Y,train_size = 0.75,random_state = i)
    KNN = KNeighborsClassifier(n_neighbors = 5 ,p = 2)
    KNN.fit(X_train,Y_train)
    X_train.shape
    X_test.shape
    Y_pred_train = KNN.predict(X_train)
    Y_pred_test = KNN.predict(X_test)
    training_accuracy.append(accuracy_score(Y_train,Y_pred_train))
    test_accuracy.append(accuracy_score(Y_test,Y_pred_test))
print("Average Training Accuracy:",np.mean( training_accuracy).round(3))
print("Average Testing Accuracy:",np.mean( test_accuracy).round(3))
# k = 5,7,9,11,13
l1.append(np.mean(training_accuracy).round(3))
l2.append(np.mean(test_accuracy).round(3))
print(l1)
print(l2)
"""[0.785, 0.787, 0.821, 0.874, 0.92]
[0.761, 0.764, 0.779, 0.808, 0.838]"""

#plot to know which point is nearest
import matplotlib.pyplot as plt
plt.scatter(range(5,15,2),l1)
plt.plot(range(5,15,2),l1,color='black')
plt.scatter(range(5,15,2),l2,color="red")
plt.plot(range(5,15,2),l2,color='black')
plt.show()#KNN assignment#
import numpy as np
import pandas as pd
df = pd.read_csv("C:\\Users\\dell\\Downloads\\Zoo.csv")
df
df.shape
df.info() 
df = df.drop(df.columns[[0]],axis = 1)
df
df.shape
df.info()

#data partitioning#
df_cont = df.iloc[:,0:16]
df_cont
df_cont.shape
df_cont.info()

Y = df["type"]
Y

#partitioning of data into training and testing data#
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(df_cont,Y,train_size = 0.75,random_state = 15)

#KNN nearest algorithm#
from sklearn.neighbors import KNeighborsClassifier
KNN =   KNeighborsClassifier(n_neighbors = 13,p = 2)#p=2 is euclidean distance#
KNN.fit(X_train,Y_train)
Y_pred_train = KNN.predict(X_train)
Y_pred_test = KNN.predict(X_test)
from sklearn.metrics import accuracy_score
ac1 = accuracy_score(Y_train,Y_pred_train)
ac1
ac2 = accuracy_score(Y_test,Y_pred_test)
ac2

#cross validation method#
""""VALIDATION SET APPROACH FOR IDENTIFYING THE MOST AVERAGE VALUE FOR KNN ALGO"""
l1 = []
l2 = []#we should only run once the above two statements

training_accuracy = []
test_accuracy = []
for i in range(1,100):
    X_train,X_test,Y_train,Y_test = train_test_split(df_cont,Y,train_size = 0.75,random_state = i)
    KNN = KNeighborsClassifier(n_neighbors = 5 ,p = 2)
    KNN.fit(X_train,Y_train)
    X_train.shape
    X_test.shape
    Y_pred_train = KNN.predict(X_train)
    Y_pred_test = KNN.predict(X_test)
    training_accuracy.append(accuracy_score(Y_train,Y_pred_train))
    test_accuracy.append(accuracy_score(Y_test,Y_pred_test))
print("Average Training Accuracy:",np.mean( training_accuracy).round(3))
print("Average Testing Accuracy:",np.mean( test_accuracy).round(3))
# k = 5,7,9,11,13
l1.append(np.mean(training_accuracy).round(3))
l2.append(np.mean(test_accuracy).round(3))
print(l1)
print(l2)
"""[0.785, 0.787, 0.821, 0.874, 0.92]
[0.761, 0.764, 0.779, 0.808, 0.838]"""

#plot to know which point is nearest
import matplotlib.pyplot as plt
plt.scatter(range(5,15,2),l1)
plt.plot(range(5,15,2),l1,color='black')
plt.scatter(range(5,15,2),l2,color="red")
plt.plot(range(5,15,2),l2,color='black')
plt.show()


#################     OUTPUT      ##############
l1.append(np.mean(training_accuracy).round(3))
l2.append(np.mean(test_accuracy).round(3))
print(l1)
print(l2)
[0.785, 0.787, 0.821, 0.874, 0.92]
[0.761, 0.764, 0.779, 0.808, 0.838]





